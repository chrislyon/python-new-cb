<<<<<<< /root/dvp/simple-tcp-server-with-python-twisted/sess2/session.py
##
## 
##

import pdb

class Session(object):
    """
        Classe de base pour un session
    """
    def __init__(self):
        self.etape = 0                          # Etape en cours
        self._prompt = "<vide>"          # Prompt a afficher
        self.reponse = None                     # Reponse de l'utilisateur
        self.error = None
        self.EXIT = False                       # Fin du scenario
        self.saisie = False


    ## Les Prompts
    PR_ETAPE1  = 101

    ## Les Messages 
    VALID_OK    = 1000
    EXIT_ANNUL  = 1001

    ## Les Messages d'erreurs
    ERR_ETAPE   = 2000
    ERR_ETAPE1  = 2001

    lib_err = {
        VALID_OK:"VALIDATION BASE DE DONNEES : OK",
        EXIT_ANNUL:" ANNULATION DE LA TRANSACTION ",
        ERR_ETAPE:"Erreur ETAPE Scenario",
        ERR_ETAPE1:"Erreur pour TEST",
        PR_ETAPE1:'Saisir un chiffre entre 1 et 5: ',
    }

    def lib(self, err):
        """
            Retourne les libelles
        """
        return self.lib_err[err]

    # --------------------------
    # Scenario par defaut 
    # 0 : Init
    # 1 : Saisie Valeur
    # 2 : Fin 

    INIT        = 0
    ETAPE_1     = 1
    VERIF       = 2 
    VALIDATION  = 3

    def next(self):
        """
        Scenario par defaut
        => Ici pour test
        """
        if not self.EXIT:
            if self.etape == self.INIT:
                self._prompt = ""
                self.error = None
                self.saisie = False
                self.etape += 1

            elif self.etape == self.ETAPE_1:
                self._prompt = self.lib(self.PR_ETAPE1)
                self.saisie = True
                #self.error = None
                self.etape += 1

            elif self.etape == self.VERIF:
                self.saisie = False
                ## Verification 
                ## qui est dans reponse
                ## si c'est bon on incremente self.etape
                try:
                    r = int(self.reponse)
                except:
                    r = 0

                if r >= 1 and r <= 5:
                    self.error = None
                    self.etape += 1
                else:
                    self.error = self.ERR_ETAPE1
                    self.etape -= 1
                

            elif self.etape == self.VALIDATION:
                ## Validation on ecrit le tout
                ## si c'est bon
                self.error = self.VALID_OK
                self.etape = self.INIT
            else:
                ## On repart au debut
                self.error = self.ERR_ETAPE
                self.etape = self.INIT
        else:
            ## Exit
            self.saisie = False
            self._prompt = ""
            self.error = self.EXIT_ANNUL


        return self.EXIT, self.saisie, self._prompt, self.error

    def set_reponse(self, rep):
        """
        Traitement de la reponse
        """
        self.reponse = rep
        if rep in ('ANNUL', 'QUIT'):
            self.EXIT = True

        self.next()

    def prompt(self):
        if self._prompt:
            p = self._prompt
        else:
            p = "<vide>"

        return "(%s:%s)" % (self.etape, p)

    def __str__(self):
        """
            Pour debug
        """
        return "Etape : %s / Rep = %s / Sai = %s / Err = %s " % (self.etape, self.reponse, self.saisie, self.error )


## -------------------
## Classe MP
## -------------------

class Session_MP(Session):

    ## Les Prompts
    PR_DOSSIER  = 101
    PR_OPER     = 102
    PR_BOBINE   = 103

    ## Les Messages 
    VALID_OK    = 1000
    EXIT_ANNUL  = 1001

    ## Les Messages d'erreurs
    ERR_ETAPE   = 2000
    ERR_DOS     = 2001
    ERR_OPER    = 2002

    lib_err = {
        VALID_OK:"VALIDATION BASE DE DONNEES : OK",
        EXIT_ANNUL:" ANNULATION DE LA TRANSACTION ",
        ERR_ETAPE:"Erreur ETAPE Scenario",
        ERR_DOS:"Erreur Dossier inexistant",
        ERR_OPER:"Operation Incorrecte",
        PR_DOSSIER:'No Dossier :',
        PR_OPER:'Operation : ',
        PR_BOBINE:'No Bobine : ',
    }

    # ----------------------------------------
    # 0 : Init
    # 1 : Saisie du dossier
    # 2 : Verification du dossier
    # 3 : Saisie Operation (USER+OP+Etape)
    # 4 : Verification Operation
    # 5 : Saisie Bobine
    # 6 : Verification Bobine
    # 7 : Validation


    INIT            = 0
    DOSSIER         = 1
    VERIF_DOSSIER   = 2
    OPERATION       = 3
    VERIF_OPERATION = 4
    BOBINE          = 5
    VERIF_BOBINE    = 6
    VALIDATION      = 7


    def next(self):
        if not self.EXIT:
            if self.etape == self.INIT:
                self.dossier = None
                self.User = None
                self.Oper = None
                self.Op_Etape = None
                self._prompt = ""
                self.error = None
                self.saisie = False
                self.etape += 1

            elif self.etape == self.DOSSIER:
                self._prompt = self.lib(self.PR_DOSSIER)
                self.saisie = True
                #self.error = None
                self.etape += 1

            elif self.etape == self.VERIF_DOSSIER:
                self.saisie = False
                ## Verification du dossier
                ## qui est dans reponse
                ## si c'est bon on incremente self.etape
                if self.reponse in ('1200', '1201'):
                    self.error = None
                    self.etape += 1
                else:
                    self.error = self.ERR_DOS
                    self.etape -= 1

            elif self.etape == self.OPERATION:
                self.reponse = None
                self.saisie = True
                self._prompt = self.lib(self.PR_OPER)
                #self.error = None
                self.etape += 1

            elif self.etape == self.VERIF_OPERATION:
                self.saisie = False
                self._prompt = ""
                ## Verification de l'operation
                if self.reponse in ('DIEDRMM', 'DIEFRMM' ):
                    self.error = None
                    self.etape += 1
                else:
                    self.error = self.ERR_OPER
                    self.etape -= 1
                    

            elif self.etape == self.BOBINE:
                self.reponse = None
                self.saisie = True
                self._prompt = self.lib(self.PR_BOBINE)
                self.etape += 1

            elif self.etape == self.VERIF_BOBINE:
                self.saisie = False
                self.etape += 1
                self._prompt = ""
                self.error = None

            elif self.etape == self.VALIDATION:
                ## Validation on ecrit le tout
                ## si c'est bon
                self.error = self.VALID_OK
                self.etape = self.INIT
            else:
                ## On repart au debut
                self.error = self.ERR_ETAPE
                self.etape = self.INIT
        else:
            ## Exit
            self.saisie = False
            self._prompt = ""
            self.error = self.EXIT_ANNUL


        return self.EXIT, self.saisie, self._prompt, self.error
               

def test():
    #pdb.set_trace()

    DEBUG = False

    ## A choisir
    s = Session_MP()
    #s = Session()

    EXIT = False
    while not EXIT:
        if DEBUG:
            print " %s " % s

        print s.prompt()

        EXIT, saisie, prompt, error = s.next()

        if saisie and not EXIT:
            if DEBUG:
                print "=" * 70
                print " %s " % s
            reponse = raw_input(prompt)
            s.set_reponse(reponse)

        if s.error > 1000 :
            print "ERREUR : %s " % s.lib(s.error)
        elif s.error is not None:
            print "> %s " % s.lib(s.error)

if __name__ == '__main__':
    test()
=======

class Session(object):
	def __init__(self):
		self.etape = 0				# Etape en cours
		self.prompt = "<vide>"		# Prompt a afficher
		self.reponse = None			# Reponse de l'utilisateur
		self.error = None
		self.EXIT = False			# Fin du scenario
		self.saisie = False

	# ----------------------------------------
	# 0 : Saisie du dossier
	# 1 : Verification du dossier
	# 2 : Saisie Operation (USER+OP+Etape)
	# 3 : Verification Operation
	# 4 : Saisie Bobine
	# 5 : Verification Bobine
	# 6 : Validation
	INIT 			= 0
	DOSSIER 		= 1
	VERIF_DOSSIER 	= 2
	OPERATION 		= 3
	VERIF_OPERATION = 4
	BOBINE 			= 5
	VERIF_BOBINE	= 6
	VALIDATION 		= 7

	def next(self):
		if self.etape == Session.INIT:
			self.dossier = None
			self.User = None
			self.Oper = None
			self.Op_Etape = None
			self.etape += 1
		elif self.etape == Session.DOSSIER:
			self.prompt = "Dossier :"
			self.saisie = True
			self.etape += 1
		elif self.etape == Session.VERIF_DOSSIER:
			self.saisie = False
			self.prompt = ""
			## Verification du dossier
			## qui est dans reponse
			## si c'est bon on incremente self.etape
			self.error = None
			self.etape += 1
		elif self.etape == Session.OPERATION:
			self.saisie = True
			self.prompt = "Operation"
			self.error = None
			self.etape += 1
		elif self.etape == Session.VERIF_OPERATION:
			self.saisie = False
			self.prompt = ""
			## Verification de l'operation
			self.error = None
			self.etape += 1
		elif self.etape == Session.BOBINE:
			self.saisie = True
			self.prompt = "No Bobine"
			self.etape += 1
		elif self.etape == Session.VERIF_OPERATION:
			self.saisie = False
			self.etape += 1
			self.prompt = ""
			self.error = None
		elif self.etape == Session.VALIDATION:
			## Validation on ecrit le tout
			## si c'est bon
			self.etape = Session.INIT
		else:
			## C'est une erreur
			self.etape = Session.INIT

		return self.EXIT, self.saisie, self.prompt, self.error
			

	def set_reponse(self, rep):
		self.reponse = rep
		self.next()

	def __str__(self):
		return "Etape : %s / Reponse = %s "

def test():
	s = Session()
	EXIT = False
	while not EXIT:
		print "Etape : %s " % s.etape
		EXIT, saisie, prompt, error = s.next()
		if saisie:
			reponse = raw_input(prompt)
			print s.set_reponse(reponse)
		

if __name__ == '__main__':
	test()
>>>>>>> /tmp/session.py~other.ozQlFS
